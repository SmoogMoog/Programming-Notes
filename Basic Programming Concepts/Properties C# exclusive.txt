Properties are a C# exclusive feature where it allows you to quickly define 
whether or not a variable can be read and whether or not a variable can be changed
through the shorthand that Properties provide. 

This is mainly used for keeping the good practice of making variables mostly
private (to keep code on a need-to-know basis), while also sidestepping the issue
that comes with this practice (a lot of Getters and Setters bloating a class).

Properties allow variables to be private (only modifiable within it's same class)
WHILE ALSO being accessable for other classes to read. 

Kind of like a pseudo between
private and public. 

However, you can stil make the "get" and "set" rights public or private 
depending on the access you want. Public means accessable by other classes,
private means exclusively accessable to the same class.

EX:
public int Score
{
    public get
    {
        return score;
    }
    private set
    {
        score = value;
    }
}

Properties are normally capatilized. The set part uses the keyword value which is
essentially the value you provide the setter whenever you change the value.

Both get and set do not have to be present.

You can also add any checks or any additional code to run within get or set
when calling them respectively.
 
IMP NOTE: If you do not wish to add any addition functionality, 
a Property can be auto-implemented using the following shorthand:
public int Score { public get; private set; }