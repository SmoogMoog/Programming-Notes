Namespaces are important to managing larger projects.
They allow us to group a collection of classes under one name.

WHY TO USE:
You may have noticed that some "Built in" classes are not recognized by
your program if you do not include a certain namespace with the using keyword.

This is because those classes/methods belong to said namespace. 
The Console class is one of the classes that belong to a namespace. Unless you 
include the line "using System;" on top of your program, the compiler does not 
recognize that the Console class even exists.

Namespaces provide a fast way to be able to use groups of classes and methods
in any other classes that you wish WITHOUT having to copy the whole section
of code AGAIN in your current project. They also allow you to pick and choose 
what you want to include in a fast convenient way.

While not needed for small projects, in bigger projects they are a must, and generally
good practice.

HOW TO USE:
To create a namespace it goes as follows:
namespace MathLibrary{
  //your classes or types that you want to include in this group here
  public static class Math{...}
}
note: You can also have namespaces nested in other namespaces.

To include this group of classes to be used in another class you do as follows:

using MathLibrary;
public class MyProgram{
  //refer to the namespace here
}
note: The inclusion of a namespace is done with the "using" keyword, and
is typically done at the beginning of your program.


IMPORTANT NOTES for C# IN MICROSOFT VISUAL STUDIO: 

It seems that by default, 
whenever you create a new class, that class is set to be included within a 
namespace with the syntax above WITH THE SAME NAME you set your project as.
To properly organize namespaces, you must create new folders or new projects
within the overall SOLUTION. When you do this, their namespace will have to reflect
their path name within the folder relative to the their project name as the root EX:
namespace RootProjectName.SubFolder{
}

If you are confused as to why sometimes your program does not recognize a class
you made within another class despite the both of them being labeled as public,
namespaces are the reason why. Namespaces also make it so that those classes
within itself are ONLY accessable from the use of the using keyword and within 
other areas where you are defining that same namespace. 
Make sure that if you do not want a class to be a part of a namespace, then
remove the namespace syntax. As long as both class are public, then the 
program will recognize both classes and you will be able to use them freely.