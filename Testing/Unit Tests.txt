As the name suggests, "Unit Tests" test a small chunk of code with NO external 
dependencies. If external dependencies are needed to test, then you create mockups
of those dependencies when testing. 

WHY TO USE:
The reasons for Unit Testing are two-fold. First, Unit Tests encourages good
practice in keeping your code modular ie. each individual part must do one
thing ONLY. (Do not make any monoliths where a single class takes care of 
every job).

The second is that Unit Tests allow you to save you time by being able to show you
whether or not your code works instantly (as opposed to manually running it and 
looking at the results).

HOW TO USE:
This will vary depending on your IDE and language that you are using. For this
part of the notes, I will be detailing the process in Microsoft Visual Studio using
C#. 

To add a Unit Test to your project, right click on your solution, add item,
and add another project. Now search for a Unit Test template. You have now added 
a Unit Test to your project!

Make sure the Unit Test has access to all the code you want to test (you may have to 
sort out it's dependencies so that the Unit Test is explicitly dependent on your
main code). Import the namespace of the classes you want to test with the "using
keyword" (see namespaces section for more info), and use the Assertion class to 
test whatever inputs and results you see fit.