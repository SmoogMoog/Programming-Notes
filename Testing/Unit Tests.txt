As the name suggests, "Unit Tests" test a small chunk of code with NO external 
dependencies. If external dependencies are needed to test, then you create mockups
of those dependencies when testing. 

WHY TO USE:
The reasons for Unit Testing are two-fold. First, Unit Tests encourages good
practice in keeping your code modular ie. each individual part must do one
thing ONLY. (Do not make any monoliths where a single class takes care of 
every job).

The second is that Unit Tests allow you to save you time by being able to show you
whether or not your code works instantly (as opposed to manually running it and 
looking at the results).

HOW TO USE:
This will vary depending on your IDE and language that you are using. For this
part of the notes, I will be detailing the process in Microsoft Visual Studio using
C#. 

To add a Unit Test to your project, right click on your solution, add item,
and add another project. Now search for a Unit Test template. You have now added 
a Unit Test to your project!

Make sure the Unit Test has access to all the code you want to test (you may have to 
sort out it's dependencies so that the Unit Test is explicitly dependent on your
main code). Import the namespace of the classes you want to test with the "using
keyword" (see namespaces section for more info).

Now HOW TO WRITE your Unit Tests.
Typically you will follow this pattern when writing Unit Tests.
  1. Initialize your objects, the expected value, and input data that will be 
passed to the method you want to test

  2. Using the method you want to test within the test itself.

  3. Collecting the result you received from enacting the method and ASSERTING that
it was the result you expected.

EX:
[TestMethod]
public void MethodName_Scenario_ReturnsCertainValue(){
//intialize objects, expected value, and input data

//use the method you want to test

//assert the expected value with the actual value you received         
}
Your Unit Tests are methods themselves, and as such should be named in a way that 
conveys the method you want to test, the use case scenario, and the expected 
behavior separated by underscores (see above example again).

Keep in mind that when making your Unit Tests, try to avoid conditional and looping
statements as this introduces even more logic into your code that may go wrong 
(you wouldn't want to make Unit Tests for your Unit Tests do you?).


Now what should you make the tests about? 
In personal opinion, you should have one test to cover the most common and expected 
case, with the other tests covering being edge cases (special scenarios that needs 
explicit handling to avoid an error). If you encounter a bug, make a Unit Test to cover
that bug before going to solve it!