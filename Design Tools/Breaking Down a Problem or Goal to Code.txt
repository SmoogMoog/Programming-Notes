My goal with this is to note my workflow when it comes to programming a solution 
to a problem or toward a goal. I wanted this process to not only to have better
documentation of my work, but also as a means of clearly explaining to people 
who are not familiar with programming what my program does. 

Here is my general approach when wanting to code up a solution to a problem
or with the express of achieving a goal.

Keep in mind that the knowledge of coding languages comes in as being a toolbox
on what actions you can take to build a bridge between the beginning of a process
to the end.

SO now keeping this in mind here's the low-down:
-------------------------------------------------------------------------------------
  1. Define what data you are given, and what data you need to end up 
with at the end. 
This will give you your starting point and ending point before doing anything else.

  2. Reword the problem into as simple terms as possible, be stupid with it.
Make sure you note what terms you do not understand so that you may search
it up. Then reword the problem into laymans terms.

  3. Start breaking it down into a list of steps (1, 2, 3) to go from input to
output, be stupid with it. What can help is looking at Gherkin Syntax for 
the wording of breaking things down. Major keywords of Gherkin Syntax are Given xyz...
When xyz... Then xyz... The keyword And can be used to elaborate on any particular statement.

You could take snippets from when you were rewording 
the problem to create the steps as well if it is suitable.

 If neccessary create a simpler version of the current problem and try to solve that instead
 if the original problem is too much. This will give insight to solving the original problem.

  4. Break the first list of steps into even stupider words if you can. (1a, 1b, 1c)

  5. Underneath those list of steps, when you can't break them down into
stupider words, then write out the coding steps if necessary. (No need to label
but just space them out appropriately)

  6. Label big stupid steps into UI and Business Logic respectively.

  7. Start coding once you are finished 

 
  8. Code the solution
With the previous step done, this step should be trivial, as it is just coding all
the common steps you have modeled. Use your knowledge of your programming language
to put your plan into action. 

The previous tactics should at least allow you to arrive at a brute force solution

-------------------------------------------------------------------------------------
  9. Use your knowledge of time complexities and space complexities to guide any
refactoring. 

Look at your current solution and identify its time complexity and space complexity 
among this scale:
O(1)
O(logn) - binary search
O(n) - single for loop - hashtables- two pointers - sliding window 
O(n logn) sorting
O(n^2) double for loop
O(2^n)

Is there any room for improvement in your solution? Is it possible to reach a better
solution using an algorithm or external data structure? 

You will have to identify this and make any improvements possible using your current
solution as a base. 


-------------------------------------------------------------------------------------
Addendum: Updated after my first internship and learning more of how to break
down problems. 



  




