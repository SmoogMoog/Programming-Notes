That being said, at a very base level, programs are just a list of steps
that typically take some data, and output some other data in response.
However, things can get verbose and overwhelming if you have all aspects of your
program all in one place. So generally we 
to see everything in one place, so we keep these general guidelines in mind.

DATA, LOGIC, and STATE should all be separate from each other.

Groups of DATA should be structs, in which you initialize in the main program 
at the beginning to your liking. Or within the module they are used the most 
(any various state modules or in main). They should stand on their own, 
not depending on anything else.

LOGIC should be a group of functions in a file (or uninstantiable static class if the
language does not allow for it) that deal with pure logic. These files do not store
or change any state externally (variables), they ONLY contain functions. 
These functions should always take in an input, and return an output. The functions
can only change or calculate something with the input they take, and cannot reach out 
outside for anything. This means that they cannot reach out to anything else for 
external state. These logic files should stand alone and NOT DEPEND ON ANYTHING.

STATE deals with the input/output from/to user, reading data, your UI code, 
and writing to your database.
State files can and often DEPEND ON LOGIC FILES AND DATA.

GENERAL GUIDELINES: 
Separate business logic from your code and group them together AS MUCH AS POSSIBLE.
This will allow the business logic to be reused with other UI's or Data.

STATE can call LOGIC, but not the other way around. It is a one way relationship.

When in doubt of making a function, give it a parameter.

Try to make functions "pure" as possible

Encapsulate code into namespaces/packages/modules


