Analogy: Think of it like a stack of books.
You can only check, remove, and add books at the top of the Stack (or end)
(peek, pop, push)
All these operations have a performance of O(1) 

FIRST IN LAST OUT (FILO)

To Traverse a Stack, the head pointer (see Data Structure Trends for more
detail) only keeps track of the topmost item. Because of this you may 
as well call the head pointer top instead. 

WHEN TO USE: Whenever you want quick access or pay special priority to 
the most recent thing, use a stack. Visualize the undo shortcut seen everywhere 
in software. Or sifting through menus/states in video games (where you go into 
settings menu and afterwards it takes you back to the main menu, main menu being 
the most recent menu). 

If you have a scenario where you do not care about the ORDER in which data comes in,
then look elsewhere.

EX:
public class Stack{
  Node top;
  public Stack(int data){
    top = new Node(data);
  }

  public Push(Node newNode){
    Node temp = top;
    top = newNode;
    newNode.next = temp;
  }

}

class Node{
  int data;
  Node next;

  public Node(int desData){
    data = desData;
    next = null;
  }
}

